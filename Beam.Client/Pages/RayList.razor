@page "/frequency/{id:int}"
@inject IDataService data
@inject IJSRuntime jsRunTime


<RayInput @bind-newRay="newRay" RayCast="@RayCast" />
<div class="spinner-border" role="status" hidden="@HideLoading">
    <span class="sr-only">Loading. . .</span>
</div>
<div @ref="rayListContainer">
    @foreach (var ray in data.Rays)
    {
        <p>
            <RayItem ray="@ray" />
        </p>
    }
</div>


@code{
    [Parameter]
    public int Id { get; set; }
    ElementReference rayListContainer;

    public RayToCast newRay { get; set; } = new RayToCast();

    public bool HideLoading {get; set; } = false;

    object[] keyFrames = new[]
    {
        new { opacity = 0.0, offset = 0.0 },
        new { opacity = 0.9, offset = 0.6 },
        new { opacity = 1.0, offset = 1.0 },
    };

    bool rayCastCalled;

    protected override void OnParametersSet()
    {
        data.UpdatedRays += UpdateForNewRays;
        data.SelectedFrequency = Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (rayCastCalled)
        {
            await jsRunTime.InvokeVoidAsync("UIHelpers.animateElement", rayListContainer, keyFrames, 2000);
            rayCastCalled = false;
        }
    }

    
    
    void UpdateForNewRays()
    {
        HideLoading = true;
        if (data.Rays.Any(r => r.UserName == data.CurrentUser.Name) == false )
        {
            newRay.Text = $"Hello, my name is {data.CurrentUser.Name}";
        }
        StateHasChanged();
    }


    void RayCast()
    {
        HideLoading = false;
        rayCastCalled = true;
    }

}
